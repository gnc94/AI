import tkinter as tk
from tkinter import messagebox
from simpleai.search import astar, SearchProblem

GOAL = '12345678e'

class EightPuzzleSolver(SearchProblem):
    def __init__(self, initial):
        self.goal = GOAL
        super().__init__(initial)

    def actions(self, state):
        index = state.index('e')
        moves = []
        if index % 3 > 0: moves.append('L')
        if index % 3 < 2: moves.append('R')
        if index // 3 > 0: moves.append('U')
        if index // 3 < 2: moves.append('D')
        return moves

    def result(self, state, action):
        index = state.index('e')
        swap = {'L': -1, 'R': 1, 'U': -3, 'D': 3}[action]
        new_index = index + swap
        state = list(state)
        state[index], state[new_index] = state[new_index], state[index]
        return ''.join(state)

    def is_goal(self, state):
        return state == self.goal

    def heuristic(self, state):
        distance = 0
        for i, val in enumerate(state):
            if val == 'e':
                continue
            goal_index = GOAL.index(val)
            distance += abs(i // 3 - goal_index // 3) + abs(i % 3 - goal_index % 3)
        return distance

class PuzzleGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("8 Puzzle Solver (AI)")
        self.board = list("7245e8361")
        self.buttons = []
        self.create_board()
        tk.Button(root, text="Solve", command=self.solve).grid(row=3, column=0, columnspan=3)

    def create_board(self):
        for i in range(9):
            btn = tk.Button(self.root, text=self.board[i] if self.board[i] != 'e' else ' ',
                            font=("Arial", 20), width=4, height=2)
            btn.grid(row=i // 3, column=i % 3)
            self.buttons.append(btn)

    def update_board(self):
        for i in range(9):
            self.buttons[i].config(text=self.board[i] if self.board[i] != 'e' else ' ')

    def solve(self):
        problem = EightPuzzleSolver(''.join(self.board))
        result = astar(problem)
        path = [state for action, state in result.path()]
        self.animate_solution(path)

    def animate_solution(self, path, index=0):
        if index >= len(path):
            messagebox.showinfo("Done", "Puzzle Solved!")
            return
        self.board = list(path[index])
        self.update_board()
        self.root.after(500, lambda: self.animate_solution(path, index + 1))

if __name__ == "__main__":
    root = tk.Tk()
    gui = PuzzleGUI(root)
    root.mainloop()
